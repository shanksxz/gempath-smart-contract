/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DiamondTrackingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allDiamonds"
      | "getData"
      | "getId"
      | "myLocation"
      | "senderInfo"
      | "setSenderValues"
      | "setValues"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allDiamonds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(functionFragment: "getId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "myLocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "senderInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSenderValues",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValues",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allDiamonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myLocation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "senderInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSenderValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setValues", data: BytesLike): Result;
}

export interface DiamondTracking extends BaseContract {
  connect(runner?: ContractRunner | null): DiamondTracking;
  waitForDeployment(): Promise<this>;

  interface: DiamondTrackingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allDiamonds: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint, bigint] & { id: string; size: bigint; weight: bigint }],
    "view"
  >;

  getData: TypedContractMethod<[], [string], "view">;

  getId: TypedContractMethod<[], [string], "view">;

  myLocation: TypedContractMethod<[], [string], "view">;

  senderInfo: TypedContractMethod<
    [],
    [[string, string] & { from: string; location: string }],
    "view"
  >;

  setSenderValues: TypedContractMethod<
    [_location: string],
    [void],
    "nonpayable"
  >;

  setValues: TypedContractMethod<
    [_size: BigNumberish, _id: string, _weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allDiamonds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint, bigint] & { id: string; size: bigint; weight: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "myLocation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "senderInfo"
  ): TypedContractMethod<
    [],
    [[string, string] & { from: string; location: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "setSenderValues"
  ): TypedContractMethod<[_location: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setValues"
  ): TypedContractMethod<
    [_size: BigNumberish, _id: string, _weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
